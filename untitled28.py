# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L38Mw0RnmhLR6R2OaWPMbhQauG6JA9CU
"""

import tensorflow as tf
print(tf.__version__)

!pip install tensorflow==2.17.1

import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image
import zipfile
import os

# Unzip the model files if not already done
zip_file_path = '/content/converted_keras.zip'  # Replace with your ZIP file name
output_dir = 'model_dir'

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(output_dir)

# Define a custom object to handle the 'groups' argument
class DepthwiseConv2D_fix(tf.keras.layers.DepthwiseConv2D):
    def __init__(self, *args, **kwargs):
        # Remove the 'groups' argument if present
        kwargs.pop('groups', None)
        super(DepthwiseConv2D_fix, self).__init__(*args, **kwargs)

    def get_config(self):
        config = super(DepthwiseConv2D_fix, self).get_config()
        config.pop('groups', None)  # Remove 'groups' from config as well
        return config

# Load the Keras model, potentially using the custom object if needed
# If your model uses DepthwiseConv2D with the 'groups' argument, use the following:
model = tf.keras.models.load_model(os.path.join(output_dir, 'keras_model.h5'),
                                   custom_objects={'DepthwiseConv2D': DepthwiseConv2D_fix})
# Otherwise, use the standard loading method:
# model = tf.keras.models.load_model(os.path.join(output_dir, 'keras_model.h5'))


# Load class labels
with open(os.path.join(output_dir, 'labels.txt'), 'r') as f:
    class_labels = f.read().splitlines()

# Function to predict class
def predict_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))  # Adjust size as needed
    img_array = image.img_to_array(img) / 255.0  # Normalize
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    predictions = model.predict(img_array)
    class_index = np.argmax(predictions, axis=1)
    return class_index

# Example usage
img_path = '/content/pexels-aratuc-nash-802127.jpg'  # Replace with your image path
result = predict_image(img_path)
print("Predicted class:", class_labels[result[0]])